{"ast":null,"code":"class SearchAndFilter {\n  searchAndFilter(courses, searchList, subject, minimumCredits, maximumCredits) {\n    if (searchList.length !== 0) {\n      let coursesAfterSearch = [];\n      var counter = 0;\n\n      for (const course of Object.values(courses)) {\n        counter = 0;\n\n        for (const tag of searchList) {\n          for (const keyword of course.keywords) {\n            if (keyword.includes(tag)) {\n              counter = 1;\n            }\n          }\n        }\n\n        if (counter === 1) {\n          coursesAfterSearch.push(course);\n        }\n      }\n\n      courses = coursesAfterSearch;\n    }\n\n    if (subject !== 'All') {\n      let coursesAfterSubject = [];\n\n      for (const course of Object.values(courses)) {\n        if (course.subject === subject) coursesAfterSubject.push(course);\n      }\n\n      courses = coursesAfterSubject;\n    }\n\n    if (minimumCredits !== '') {\n      let coursesAfterMinimumCredits = [];\n\n      for (const course of Object.values(courses)) {\n        if (course.credits >= parseInt(minimumCredits)) coursesAfterMinimumCredits.push(course);\n      }\n\n      courses = coursesAfterMinimumCredits;\n    }\n\n    if (maximumCredits !== '') {\n      let coursesAfterMaximumCredits = [];\n\n      for (const course of Object.values(courses)) {\n        if (course.credits <= parseInt(maximumCredits)) coursesAfterMaximumCredits.push(course);\n      }\n\n      courses = coursesAfterMaximumCredits;\n    }\n\n    return courses;\n  }\n\n  method1() {\n    let coursesAfterSearch = [];\n    var counter = 0;\n\n    for (const course of Object.values(courses)) {\n      counter = 0;\n\n      for (const tag of searchList) {\n        for (const keyword of course.keywords) {\n          if (keyword.includes(tag)) {\n            counter = 1;\n          }\n        }\n      }\n\n      if (counter === 1) {\n        coursesAfterSearch.push(course);\n      }\n    }\n  }\n\n}\n\nexport default SearchAndFilter;","map":{"version":3,"sources":["/Users/kshitij/Desktop/CS-639/cs639-react-2-kkumar34-master/src/SearchAndFilter.js"],"names":["SearchAndFilter","searchAndFilter","courses","searchList","subject","minimumCredits","maximumCredits","length","coursesAfterSearch","counter","course","Object","values","tag","keyword","keywords","includes","push","coursesAfterSubject","coursesAfterMinimumCredits","credits","parseInt","coursesAfterMaximumCredits","method1"],"mappings":"AAAA,MAAMA,eAAN,CAAsB;AACpBC,EAAAA,eAAe,CAACC,OAAD,EAAUC,UAAV,EAAsBC,OAAtB,EAA+BC,cAA/B,EAA+CC,cAA/C,EAA+D;AAC5E,QAAGH,UAAU,CAACI,MAAX,KAAsB,CAAzB,EAA4B;AAC1B,UAAIC,kBAAkB,GAAG,EAAzB;AACA,UAAIC,OAAO,GAAG,CAAd;;AACE,WAAI,MAAMC,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcV,OAAd,CAApB,EAA4C;AAC1CO,QAAAA,OAAO,GAAG,CAAV;;AACA,aAAI,MAAMI,GAAV,IAAiBV,UAAjB,EAA4B;AAC1B,eAAI,MAAMW,OAAV,IAAqBJ,MAAM,CAACK,QAA5B,EAAsC;AACpC,gBAAGD,OAAO,CAACE,QAAR,CAAiBH,GAAjB,CAAH,EAA0B;AACxBJ,cAAAA,OAAO,GAAG,CAAV;AACD;AACF;AACF;;AACD,YAAGA,OAAO,KAAK,CAAf,EAAiB;AACfD,UAAAA,kBAAkB,CAACS,IAAnB,CAAwBP,MAAxB;AACD;AACF;;AACHR,MAAAA,OAAO,GAAGM,kBAAV;AACD;;AAED,QAAGJ,OAAO,KAAK,KAAf,EAAsB;AACpB,UAAIc,mBAAmB,GAAG,EAA1B;;AAEA,WAAI,MAAMR,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcV,OAAd,CAApB,EAA4C;AAC1C,YAAGQ,MAAM,CAACN,OAAP,KAAmBA,OAAtB,EACEc,mBAAmB,CAACD,IAApB,CAAyBP,MAAzB;AACH;;AACDR,MAAAA,OAAO,GAAGgB,mBAAV;AACD;;AAED,QAAGb,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIc,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMT,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcV,OAAd,CAApB,EAA4C;AAC1C,YAAGQ,MAAM,CAACU,OAAP,IAAkBC,QAAQ,CAAChB,cAAD,CAA7B,EACEc,0BAA0B,CAACF,IAA3B,CAAgCP,MAAhC;AACH;;AACDR,MAAAA,OAAO,GAAGiB,0BAAV;AACD;;AAED,QAAGb,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIgB,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMZ,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcV,OAAd,CAApB,EAA4C;AAC1C,YAAGQ,MAAM,CAACU,OAAP,IAAkBC,QAAQ,CAACf,cAAD,CAA7B,EACEgB,0BAA0B,CAACL,IAA3B,CAAgCP,MAAhC;AACH;;AACDR,MAAAA,OAAO,GAAGoB,0BAAV;AACD;;AAED,WAAOpB,OAAP;AACD;;AAEDqB,EAAAA,OAAO,GAAE;AACP,QAAIf,kBAAkB,GAAG,EAAzB;AACE,QAAIC,OAAO,GAAG,CAAd;;AACA,SAAI,MAAMC,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcV,OAAd,CAApB,EAA4C;AAC1CO,MAAAA,OAAO,GAAG,CAAV;;AACA,WAAI,MAAMI,GAAV,IAAiBV,UAAjB,EAA4B;AAC1B,aAAI,MAAMW,OAAV,IAAqBJ,MAAM,CAACK,QAA5B,EAAsC;AACpC,cAAGD,OAAO,CAACE,QAAR,CAAiBH,GAAjB,CAAH,EAA0B;AACxBJ,YAAAA,OAAO,GAAG,CAAV;AACD;AACF;AACF;;AACH,UAAGA,OAAO,KAAK,CAAf,EAAiB;AACfD,QAAAA,kBAAkB,CAACS,IAAnB,CAAwBP,MAAxB;AACD;AACA;AACJ;;AAtEmB;;AAyEtB,eAAeV,eAAf","sourcesContent":["class SearchAndFilter {\r\n  searchAndFilter(courses, searchList, subject, minimumCredits, maximumCredits) {\r\n    if(searchList.length !== 0) {\r\n      let coursesAfterSearch = [];\r\n      var counter = 0;\r\n        for(const course of Object.values(courses)) {\r\n          counter = 0;\r\n          for(const tag of searchList){\r\n            for(const keyword of course.keywords) {\r\n              if(keyword.includes(tag)) {\r\n                counter = 1;\r\n              }\r\n            }\r\n          }\r\n          if(counter === 1){\r\n            coursesAfterSearch.push(course);\r\n          }\r\n        }\r\n      courses = coursesAfterSearch;\r\n    }\r\n\r\n    if(subject !== 'All') {\r\n      let coursesAfterSubject = [];\r\n\r\n      for(const course of Object.values(courses)) {\r\n        if(course.subject === subject)\r\n          coursesAfterSubject.push(course)\r\n      }\r\n      courses = coursesAfterSubject;\r\n    }\r\n\r\n    if(minimumCredits !== '') {\r\n      let coursesAfterMinimumCredits = [];\r\n\r\n      for(const course of Object.values(courses)) {\r\n        if(course.credits >= parseInt(minimumCredits))\r\n          coursesAfterMinimumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMinimumCredits;\r\n    }\r\n\r\n    if(maximumCredits !== '') {\r\n      let coursesAfterMaximumCredits = [];\r\n\r\n      for(const course of Object.values(courses)) {\r\n        if(course.credits <= parseInt(maximumCredits))\r\n          coursesAfterMaximumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMaximumCredits;\r\n    }\r\n\r\n    return courses;\r\n  }\r\n\r\n  method1(){\r\n    let coursesAfterSearch = [];\r\n      var counter = 0;\r\n      for(const course of Object.values(courses)) {\r\n        counter = 0;\r\n        for(const tag of searchList){\r\n          for(const keyword of course.keywords) {\r\n            if(keyword.includes(tag)) {\r\n              counter = 1;\r\n            }\r\n          }\r\n        }\r\n      if(counter === 1){\r\n        coursesAfterSearch.push(course);\r\n      }\r\n      }\r\n  }\r\n}\r\n\r\nexport default SearchAndFilter;\r\n"]},"metadata":{},"sourceType":"module"}